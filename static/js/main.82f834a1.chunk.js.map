{"version":3,"sources":["components/Button/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","className","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","add","setState","nomee","mdf","ingr","receitas","toConsumableArray","state","concat","nome","ingredientes","split","modo","localStorage","setItem","JSON","stringify","showAdd","removeItem","item","filter","itemList","handleChange","e","defineProperty","target","id","window","dataString","getItem","parse","console","log","_this2","document","title","react","map","index","key","x","i","components_Button","style","textAlign","type","receita_text","placeholder","onChange","ingredientes_text","modo_text","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82f834a1.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\nconst Button = (props) => {\n    return <button onClick={props.onClick} className=\"button-component\">{props.value}</button>;\n}\n\nexport default Button","import React, { Component, Fragment } from 'react'\nimport './App.css'\n\nimport Button from './components/Button'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      showAdd:false,\n      nomee:'',\n      mdf:'',\n      ingr:'',\n      receitas: [ { nome: 'lista de receitas', ingredientes: ['reactjs', 'tempo', 'internet'], modo: 'BOTE FOGO EM TUDO' }]\n    }\n  \n   \n  }\n\n  componentDidMount(){\n    var dataString = localStorage.getItem('receitas');\n    var receitas =  JSON.parse(dataString);\n    console.log(receitas);\n    if(receitas){\n\n      this.setState({receitas:receitas});\n    }\n  }\n  add = () => {\n      this.setState({\n        nomee:\"\",\n        mdf:\"\",\n        ingr:\"\",\n        \n        receitas: [...this.state.receitas, { nome: this.state.nomee, ingredientes: this.state.ingr.split(\",\"), modo: this.state.mdf }],\n      },\n      \n      ()=>{\n        localStorage.setItem('receitas', JSON.stringify(this.state.receitas));\n        this.setState({showAdd:false});\n      })\n\n  }\n  \n  \n removeItem = (item) => {\n  this.setState({\n    receitas: this.state.receitas.filter((itemList) => {\n      return itemList !== item\n    })\n  },()=>{\n    const receitas = [...this.state.receitas];\n    localStorage.setItem('receitas', JSON.stringify(this.state.receitas));\n  });\n  \n}\nhandleChange = (e) => {\n  this.setState({\n    [e.target.id]: e.target.value\n  },()=>{\n    const receitas = [...this.state.receitas];\n    window.localStorage.setItem('receitas', JSON.stringify(receitas));\n  })\n  \n}\n  render(){\n    document.title = 'Receitas'\n    return <Fragment>\n      \n        <h1>RECEITAS</h1>\n        \n       \n        <ul>\n          \n        <section className=\"flex\">\n          {this.state.receitas.map(\n            \n            (item, index) => (             \n               <li key={index}  className=\"item\">\n                <h3>RECEITA</h3>{item.nome}\n                <h3>INGREDIENTES:</h3>{item.ingredientes.map((x,i)=>{ return<li key={x}> {x}</li>})}\n                <h3>MODO DE PREPARO:</h3>{item.modo}<br/><br/> \n                <Button value=\"Deletar Receita\" onClick={() => this.removeItem(item)}></Button>\n               </li>             \n            )\n          )}\n          </section>\n        </ul>\n        {\n          this.state.showAdd ?\n        <div style={{textAlign:\"center\"}}>\n          <h3>Receita</h3>\n          <input type=\"text\" id=\"nomee\" value={this.state.receita_text} placeholder=\"Digite o nome da receita\" onChange={this.handleChange}/>\n          \n          <h3>Ingredientes</h3>\n          <input type=\"text\" id=\"ingr\" value={this.state.ingredientes_text} placeholder=\"Separados por virgula\" onChange={this.handleChange}/>\n          \n          <h3>Modo de fazer</h3>\n          <textarea type=\"text\" id=\"mdf\" value={this.state.modo_text} placeholder=\"Digite o modo de fazer\" onChange={this.handleChange}/>\n          <br/><br/><Button value=\"Adicionar\" onClick={this.add} />\n        </div>\n        :\n        <div style={{textAlign:\"center\"}}>\n          <Button value=\"Nova\" onClick={()=>{this.setState({showAdd:true})}} />\n        </div>      \n        }\n        \n      </Fragment>;\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}